/**
 *	Rewrite of DSA1 v3.02_de functions of seg075 (dungeon: common 1/2)
 *	Functions rewritten: 20/20 (complete)
 *
 *	Borlandified and identical
 *	Compiler:	Borland C++ 3.1
 *	Call:		BCC.EXE -mlarge -O- -c -1 -Yo seg075.cpp
 */

#include <string.h>
#include <stdio.h>

#include "v302de.h"
#include "common.h"

#include "seg002.h"
#include "seg003.h"
#include "seg004.h"
#include "seg007.h"
#include "seg008.h"
#include "seg027.h"
#include "seg028.h"
#include "seg047.h"
#include "seg049.h"
#include "seg075.h"
#include "seg096.h"
#include "seg097.h"
#include "seg106.h"

#if !defined(__BORLANDC__)
namespace M302de {
#endif

struct dng_gfxtab g_dng_gfxtab_wood[88] = {
	 { { {      0,      0 }, {      8,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32754,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      4,     19 }, {      0,      9 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      5,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      3,    -34 }, {      0, -32753 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,    102 }, {      0,     10 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,    -23 }, {      0, -32752 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,     56 }, {      0,     13 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,     56 }, {      0,     11 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,    -12 }, {      0, -32751 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,    -12 }, {      0, -32749 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     39,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     37,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32729,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     40,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     38,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32728,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     43,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     41,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32725,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     44,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     42,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32724,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     36,      5 }, {     45,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     24,      0 }, {     46,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     14,      0 }, {     47,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     85 }, {     48,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     48 }, {     49,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     35,     12 }, {     51,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     22,     10 }, {     52,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     13,      6 }, {     53,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     25,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32743,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     21,     19 }, {      0,     26 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     26 }, {     23,     31 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     20,    -34 }, {      0, -32742 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     16,     13 } },     32 },
	 { { {      0,     -1 }, {     23,     16 }, {     13,     32 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     16,     13 } },     32 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      8,      8 } },     33 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      8,      8 } },     33 },
	 { { {      0,      0 }, {     24,      8 }, {      8,     33 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      8,      8 } },     33 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      8,      8 } },     33 },
	 { { {      0,     -1 }, {     22,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      0,      0 } },     -1 },
	 { { {     35,     32 }, {     55,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     22,     27 }, {     56,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     13,     16 }, {     57,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     26 }, {     23,     34 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     16,     13 } },     35 },
	 { { {      0,     -1 }, {     23,     16 }, {     13,     35 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     16,     13 } },     35 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      8,      8 } },     36 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      8,      8 } },     36 },
	 { { {      0,      0 }, {     24,      8 }, {      8,     36 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      8,      8 } },     36 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      8,      8 } },     36 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },

}; // ds:0x7dea
struct dng_gfxtab g_dng_gfxtab_stone[88] = {
	 { { {      0,      0 }, {      8,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32754,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      4,     19 }, {      0,      9 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      5,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      3,    -34 }, {      0, -32753 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,    102 }, {      0,     10 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      6,    -23 }, {      0, -32752 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,     56 }, {      0,     13 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,     56 }, {      0,     11 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,    -12 }, {      0, -32751 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {      7,    -12 }, {      0, -32749 }, {      0,      0 } },     -1 },
	 { { {      0,      2 }, {     39,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      2,      2 }, {     37,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      2 }, { -32729,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     40,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      7,      0 }, {     38,      7 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32728,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     43,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     41,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32725,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     44,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     42,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32724,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     41 }, {     42,     45 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,     22 }, {     24,     46 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     24,     11 }, {     10,     47 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     39 }, {     40,     48 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,     19 }, {     19,     49 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     24,     11 }, {      9,     -1 }, {      0,      0 } },     -1 },
	 { { {     47,    -14 }, {     51,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     22,     -6 }, {     52,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     13,     -1 }, {     53,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     25,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32743,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     21,     19 }, {      0,     26 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     35 }, {     29,     31 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     20,    -34 }, {      0, -32742 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     19,     18 } },     32 },
	 { { {      0,     -1 }, {     23,     19 }, {     18,     32 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     19,     18 } },     32 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {     11,      9 } },     33 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {     11,      9 } },     33 },
	 { { {      0,      0 }, {     24,     11 }, {      9,     33 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {     11,      9 } },     33 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {     11,      9 } },     33 },
	 { { {      0,     -1 }, {     22,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      0,      0 } },     -1 },
	 { { {     39,     32 }, {     55,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     24,     20 }, {     56,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     13,     16 }, {     57,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     35 }, {     29,     34 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     19,     18 } },     35 },
	 { { {      0,     -1 }, {     23,     19 }, {     18,     35 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     19,     18 } },     35 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {     11,      9 } },     36 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {     11,      9 } },     36 },
	 { { {      0,      0 }, {     24,     11 }, {      9,     36 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {     11,      9 } },     36 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {     11,      9 } },     36 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,     22 }, {     24,     46 }, {    102,     -4 } },     10 },
	 { { {      0,     -1 }, {     23,     22 }, {     24,     46 }, {    -23,     -4 } }, -32752 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,     19 }, {     19,     49 }, {    102,     -4 } },     10 },
	 { { {      0,     -1 }, {     23,     19 }, {     19,     49 }, {    -23,     -4 } }, -32752 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      4,     19 }, {      0,      9 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      3,    -34 }, {      0, -32753 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      0,      0 } },     -1 },
}; // ds:0x841a
struct dng_gfxtab g_dng_gfxtab_marble[88] = {
	 { { {      0,      0 }, {      8,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32754,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      4,     19 }, {     -5,      9 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      5,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      3,    -34 }, {     -5, -32753 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,    102 }, {     -4,     10 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,    -23 }, {     -4, -32752 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,     56 }, {      0,     13 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,     54 }, {     -1,     11 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,    -10 }, {     -1, -32751 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,    -12 }, {      0, -32749 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     39,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     37,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32729,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     40,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     38,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32728,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     43,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     41,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32725,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     44,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     42,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32724,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      5,     27 }, {      0,     45 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,     18 }, {      0,     46 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,      9 }, {      0,     47 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      5,     26 }, {      0,     48 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,     17 }, {     -1,     49 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     59,      4 }, {     51,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     37,      3 }, {     52,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     22,      3 }, {     53,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     25,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, { -32743,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     21,     19 }, {      0,     26 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     28 }, {     15,     31 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     20,    -34 }, {      0, -32742 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     16,      8 } },     32 },
	 { { {      0,     -1 }, {     23,     16 }, {      8,     32 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     16,      8 } },     32 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      8,      4 } },     33 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      8,      4 } },     33 },
	 { { {      0,      0 }, {     24,      8 }, {      4,     33 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      8,      4 } },     33 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      8,      4 } },     33 },
	 { { {      0,     -1 }, {     22,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     29 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32739 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {      0,      0 } },     -1 },
	 { { {     53,     52 }, {     55,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     35,     36 }, {     56,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {     21,     21 }, {     57,      0 }, {      0,     -1 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     22,     28 }, {     15,     34 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    102 }, {      0,     27 }, {     17,      8 } },     35 },
	 { { {      0,     -1 }, {     23,     17 }, {      8,     35 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {     23,    -23 }, {      0, -32741 }, {     17,      8 } },     35 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     30 }, {     10,      2 } },     36 },
	 { { {      0,      0 }, {     24,     56 }, {      0,     28 }, {     10,      2 } },     36 },
	 { { {      0,      0 }, {     24,     10 }, {      2,     36 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32740 }, {     10,      2 } },     36 },
	 { { {      0,      0 }, {     24,    -12 }, {      0, -32738 }, {     10,      2 } },     36 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,     18 }, {      0,     46 }, {    102,     -4 } },     10 },
	 { { {      0,     -3 }, {      6,     18 }, {      0,     46 }, {    -23,     -4 } }, -32752 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,      0 }, {     -1,    151 }, {      0,     12 }, {      0,      0 } },     -1 },
	 { { {      0,     -3 }, {      6,     17 }, {     -1,     49 }, {    102,     -4 } },     10 },
	 { { {      0,     -3 }, {      6,     17 }, {     -1,     49 }, {    -23,     -4 } }, -32752 },
	 { { {      0,      0 }, {     -1,    -69 }, {      0, -32750 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      4,     19 }, {     -5,      9 }, {      0,      0 } },     -1 },
	 { { {      0,     -4 }, {      3,    -34 }, {     -5, -32753 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,     56 }, {      0,     13 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,     54 }, {     -1,     11 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,    -10 }, {     -1, -32751 }, {      0,      0 } },     -1 },
	 { { {      0,     -1 }, {      7,    -12 }, {      0, -32749 }, {      0,      0 } },     -1 },
}; // ds:0x8a4a
static unsigned char g_dng_stub3_unkn0[22] = { 0x01, 0xff, 0x02, 0xff, 0x03, 0x04, 0x05, 0xff, 0x06, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0a, 0xff, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xff }; // ds:0x907a
static unsigned char g_dng_stub3_unkn1[22] = { 0xff, 0xff, 0xff, 0xff, 0x10, 0x11, 0x12, 0xff, 0xff, 0xff, 0x13, 0x14, 0x15, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }; // ds:0x9090
static unsigned char g_dng_stub3_unkn2[22] = { 0xff, 0xff, 0xff, 0xff, 0x16, 0x17, 0x18, 0xff, 0xff, 0xff, 0x19, 0x1a, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }; // ds:0x90a6
static unsigned char g_dng_stub3_unkn3[22] = { 0x01, 0xff, 0x02, 0xff, 0x53, 0x1c, 0x54, 0xff, 0x4b, 0x4b, 0x4c, 0x1d, 0x4d, 0x4e, 0x4e, 0xff, 0x55, 0x56, 0x1e, 0x57, 0x58, 0xff }; // ds:0x90bc
static unsigned char g_dng_stub3_unkn4[22] = { 0x01, 0xff, 0x02, 0xff, 0x53, 0x1f, 0x54, 0xff, 0x4f, 0x4f, 0x50, 0x20, 0x51, 0x52, 0x52, 0xff, 0x55, 0x56, 0x21, 0x57, 0x58, 0xff }; // ds:0x90d2
static unsigned char g_dng_stub3_unkn5[22] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0x22, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0xff, 0xff, 0xff }; // ds:0x90e8
static unsigned char g_dng_stub3_unkn6[22] = { 0x25, 0xff, 0x26, 0xff, 0x27, 0x28, 0x29, 0xff, 0x2a, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2e, 0xff, 0x2f, 0x30, 0x31, 0x32, 0x33, 0xff }; // ds:0x90fe
static unsigned char g_dng_stub3_unkn7[22] = { 0x25, 0xff, 0x26, 0xff, 0x27, 0x34, 0x29, 0xff, 0x35, 0x35, 0x36, 0x37, 0x38, 0x39, 0x39, 0xff, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0xff }; // ds:0x9114
static unsigned char g_dng_stub3_unkn8[22] = { 0x25, 0xff, 0x26, 0xff, 0x27, 0x42, 0x29, 0xff, 0x2a, 0x2a, 0x43, 0x44, 0x45, 0x2e, 0x2e, 0xff, 0x46, 0x47, 0x48, 0x49, 0x4a, 0xff }; // ds:0x912a
static unsigned char g_dng_stub3_unkn9[22] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x40, 0x40, 0x40, 0x40, 0x40, 0xff, 0xff, 0x41, 0x41, 0x41, 0x41, 0x41, 0xff }; // ds:0x9140
static struct struct_point g_dng_stub4_unkn0[22] = {
	{   0,  1}, {  -1, -1}, { 189,  1}, { -19, 14},
	{   0, 14}, {  19, 14}, { 189, 14}, { 359, 14},
	{-253, 46}, {-0x0097, 46}, {-0x0031, 36}, {53, 36},
	{0x009b, 36}, {0x0101, 46}, {0x0167, 46}, {-0x005c, 50},
	{-0x0024, 50}, {20, 50}, {76, 50}, {0x0084, 50},
	{0x00bc, 50}, {0x00f4, 50}
}; // ds:0x9156
static struct struct_point g_dng_stub4_unkn1[22] = {
	{0x0000, 0x0001},
	{-0x0001, -0x0001},
	{0x00bd, 0x0001},
	{-0x0013, 0x000e},
	{0x0000, 0x000e},
	{0x0013, 0x000e},
	{0x00bd, 0x000e},
	{0x0167, 0x000e},
	{-0x00fd, 0x002e},
	{-0x0097, 0x002e},
	{-0x0031, 0x0024},
	{0x0035, 0x0024},
	{0x009b, 0x0024},
	{0x0101, 0x002e},
	{0x0167, 0x002e},
	{-0x0001, -0x0001},
	{-0x0024, 0x0032},
	{0x0014, 0x0032},
	{0x004c, 0x0032},
	{0x0084, 0x0032},
	{0x00bc, 0x0032},
        {-0x0001, -1}
}; // ds:0x91ae
static struct struct_point g_dng_stub4_unkn2[22] = {
	{ -0x0001, -0x0001},
        { -0x0001, -0x0001},
	{ -0x0001, -0x0001},
        { -0x0001, -0x0001},
        {  0x0000, 0x0066},
        { 0x0037, 0x0065},
        { 0x00bc, 0x0066},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ 0x0000, 0x0057},
	{ 0x004a, 0x0057},
	{ 0x00a0, 0x0057},
	{ -0x0001, -0x0001},
        { -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -0x0001},
	{ -0x0001, -1}
}; // ds:0x9206
static struct struct_point g_dng_stub4_unkn3[22] = {
	{-1, -1},
	{-1, -1},
        {-1, -1},
	{-1, -1},
	{ 2, 19},
	{ 0x003e, 0x0013},
	{ 0x00bc, 0x0013},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{ 0x0002, 0x0023},
	{ 0x0051, 0x0023},
	{ 0x00a4, 0x0023},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
	{-1, -1},
        {-1, -1},
	{-1, -1}
}; // ds:0x925e
static signed char g_dng_stub4_unkn4[22] = { 0x0f, 0x10, 0x15, 0x14, 0x11, 0x13, 0x12, 0x08, 0x09, 0x0e, 0x0d, 0x0a, 0x0c, 0x0b, 0x03, 0x04, 0x07, 0x06, 0x05, 0x00, 0x02, 0x01 }; // ds:0x92b6
static char g_dng_stub6_str_comma[3] = ", "; // ds:0x92cc
static char g_dng_stub6_str_and[6] = " UND "; // ds:0x92cf
//unsigned char g_unkn_056[1] = { 0x00 }; // ds:0x92d5


/* static */
void DNG_floor_ceil(void)
{
	struct nvf_desc nvf;
	signed short width;
	signed short height;

	/* Load ceiling */
	nvf.dst = g_renderbuf_ptr;
	nvf.src = g_buffer9_ptr3;
	nvf.no = 0;
	nvf.type = !g_dng_floor_tex ? 3 : 5;
	nvf.width = &width;
	nvf.height = &height;
	process_nvf(&nvf);


	/* Load ceiling */
	nvf.dst = g_renderbuf_ptr + 0x4030;
	nvf.src = g_buffer9_ptr3;
	nvf.no = (!(gs_direction&1)) ? 1 : 2;
	nvf.type = !g_dng_floor_tex ? 3 : 5;
	nvf.width = &width;
	nvf.height = &height;
	process_nvf(&nvf);

}

#if defined(__BORLANDC__)
static
#endif
void DNG_turn(void)
{
	signed short tmp;

	if ( ((tmp = div16(g_visual_field_vals[3])) == 15) || (tmp == 1)) {
		g_visual_field_vals[3] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[7])) == 15) || (tmp == 1)) {
		g_visual_field_vals[7] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[8])) == 15) || (tmp == 1)) {
		g_visual_field_vals[8] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[14])) == 15) || (tmp == 1)) {
		g_visual_field_vals[14] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[15])) == 15) || (tmp == 1)) {
		g_visual_field_vals[15] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[21])) == 15) || (tmp == 1)) {
		g_visual_field_vals[21] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[0])) == 15) || (tmp == 1)) {

		g_visual_field_vals[9] = g_visual_field_vals[15] = g_visual_field_vals[22] = 0;

		if ( ((tmp = div16(g_visual_field_vals[5])) == 15) || (tmp == 1)) {

			g_visual_field_vals[4] = g_visual_field_vals[10] = g_visual_field_vals[16] = g_visual_field_vals[23] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[2])) == 15) || (tmp == 1)) {

		g_visual_field_vals[13] = g_visual_field_vals[21] = g_visual_field_vals[28] = 0;

		if ( ((tmp = div16(g_visual_field_vals[5])) == 15) || (tmp == 1)) {

			g_visual_field_vals[6] = g_visual_field_vals[12] = g_visual_field_vals[20] = g_visual_field_vals[27] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[4])) == 15) || (tmp == 1)) {

		g_visual_field_vals[9] = g_visual_field_vals[16] = g_visual_field_vals[22] = g_visual_field_vals[23] = 0;

		if ( ((tmp = div16(g_visual_field_vals[5])) == 15) || (tmp == 1)) {

			g_visual_field_vals[10] = 0;
		}

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1)) {

			g_visual_field_vals[10] = g_visual_field_vals[17] = g_visual_field_vals[18] = 0;

			g_visual_field_vals[24] = g_visual_field_vals[25] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[5])) == 15) || (tmp == 1)) {

		g_visual_field_vals[11] = g_visual_field_vals[17] = g_visual_field_vals[18] = 0;

		g_visual_field_vals[19] = g_visual_field_vals[24] = g_visual_field_vals[25] = 0;

		g_visual_field_vals[26] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[6])) == 15) || (tmp == 1)) {

		g_visual_field_vals[13] = g_visual_field_vals[20] =
			g_visual_field_vals[27] = g_visual_field_vals[28] = 0;

		if ( ((tmp = div16(g_visual_field_vals[5])) == 15) || (tmp == 1)) {

			g_visual_field_vals[11] = g_visual_field_vals[12] = g_visual_field_vals[17] = 0;

			g_visual_field_vals[18] = g_visual_field_vals[19] = g_visual_field_vals[24] = 0;

			g_visual_field_vals[25] = g_visual_field_vals[26] = 0;

		}

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1)) {

				g_visual_field_vals[12] = g_visual_field_vals[18] = g_visual_field_vals[19] = 0;

				g_visual_field_vals[25] = g_visual_field_vals[26] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[9])) == 15) || (tmp == 1)) {

		g_visual_field_vals[22] = 0;

		if ( ((tmp = div16(g_visual_field_vals[17])) == 15) || (tmp == 1)) {

			g_visual_field_vals[16] = g_visual_field_vals[23] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[13])) == 15) || (tmp == 1)) {

		g_visual_field_vals[28] = 0;

		if ( ((tmp = div16(g_visual_field_vals[19])) == 15) || (tmp == 1)) {

			g_visual_field_vals[20] = g_visual_field_vals[27] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[10])) == 15) || (tmp == 1)) {

		g_visual_field_vals[9] = g_visual_field_vals[16] = g_visual_field_vals[22] = g_visual_field_vals[23] = 0;

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1)) {

			g_visual_field_vals[18] = 0;
		}

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1) ||
			((tmp = div16(g_visual_field_vals[18])) == 15) || (tmp == 1)) {

			g_visual_field_vals[17] = g_visual_field_vals[24] = g_visual_field_vals[25] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[12])) == 15) || (tmp == 1)) {

		g_visual_field_vals[13] = g_visual_field_vals[20] = g_visual_field_vals[27] = g_visual_field_vals[28] = 0;

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1)) {

			g_visual_field_vals[18] = 0;
		}

		if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1) ||
			((tmp = div16(g_visual_field_vals[18])) == 15) || (tmp == 1)) {

			g_visual_field_vals[19] = g_visual_field_vals[25] = g_visual_field_vals[26] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[11])) == 15) || (tmp == 1)) {
		g_visual_field_vals[18] = g_visual_field_vals[25] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[16])) == 15) || (tmp == 1)) {

		g_visual_field_vals[22] = 0;

		if ( ((tmp = div16(g_visual_field_vals[24])) == 15) || (tmp == 1)) {

			g_visual_field_vals[23] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[20])) == 15) || (tmp == 1)) {

		g_visual_field_vals[28] = 0;

		if ( ((tmp = div16(g_visual_field_vals[26])) == 15) || (tmp == 1)) {

			g_visual_field_vals[27] = 0;
		}
	}

	if ( ((tmp = div16(g_visual_field_vals[18])) == 15) || (tmp == 1)) {

		g_visual_field_vals[25] = 0;
	}

	if ( ((tmp = div16(g_visual_field_vals[18])) == 15) || (tmp == 1) ||
		((tmp = div16(g_visual_field_vals[25])) == 15) || (tmp == 1)) {

		if ( ((tmp = div16(g_visual_field_vals[17])) == 15) || (tmp == 1)) {

			g_visual_field_vals[24] = 0;
		}

		if ( ((tmp = div16(g_visual_field_vals[19])) == 15) || (tmp == 1)) {

			g_visual_field_vals[26] = 0;
		}
	}
}

void DNG_stub1(void)
{
	DNG_floor_ceil();
	move();
	DNG_turn();
	DNG_stub3();
	DNG_stub4();
	DNG_stub2();
	DNG_stub5();
}

void DNG_stub2(void)
{
	signed short tmp;

	tmp = div16(g_visual_field_vals[1]);

	if ((tmp == 2) || (tmp == 9)) {

		if (div16(g_visual_field_vals[5]) == 15) {
			DNG_draw_walls( ((gs_dungeon_gfx_style == 1) ? 0x4e : ((gs_dungeon_gfx_style == 2) ? 0x28 : 0x3e)), 0, 0x36);
		}
	}
}

void DNG_stub3(void)
{
	signed short i;
	signed short tmp;

	for (i = 21; i >= 0; i--) {

		tmp = div16(g_visual_field_vals[i]);

		g_visual_fields_tex[i] =
			(tmp == 6) ? g_dng_stub3_unkn1[i] :
				(tmp == 5) ? g_dng_stub3_unkn2[i] :
				(tmp == 3) ? g_dng_stub3_unkn4[i] :
				(tmp == 4) ? g_dng_stub3_unkn3[i] :
				(tmp == 7) ? g_dng_stub3_unkn5[i] :
				(tmp == 1) ? g_dng_stub3_unkn6[i] :
				(tmp == 2) ? g_dng_stub3_unkn7[i] :
				(tmp == 9) ? g_dng_stub3_unkn8[i] :
				(tmp == 8) ? g_dng_stub3_unkn9[i] :
				(tmp == 10) ? g_dng_stub3_unkn0[i] :
				(tmp == 11) ? g_dng_stub3_unkn0[i] :
				(tmp != 15) ? -1 : g_dng_stub3_unkn0[i];
	}
}

void DNG_draw_walls(signed short x, signed short y, signed short a3)
{
	signed short nvf_width;
	signed short nvf_height;
	signed short width2;
	signed short height2;
	signed short flag;
	Bit8u *dst_ptr;
	Bit8u *ptr2;
	struct nvf_desc nvf;

	flag = (a3 & 0x8000) ? 1 : 0;
	a3 &= 0x3fff;

	if ((a3 >= 8) && (a3 <= 13) && !g_dng_floor_tex) {
		a3 += 6;
	} else {
		if ((a3 >= 14) && (a3 <= 19) && !g_dng_floor_tex) {
			a3 -= 6;
		}
	}

	nvf.dst = dst_ptr = g_renderbuf_ptr + 0x7530;
	nvf.src = (Bit8u*)g_buffer9_ptr3;
	nvf.no = a3;
	nvf.width = &nvf_width;
	nvf.height = &nvf_height;
	nvf.type = 3;
	process_nvf(&nvf);

	width2 = nvf_width;
	height2 = nvf_height;

	if ((x < 0) && ((x + width2) > 0)) {
		width2 += x;
		dst_ptr += __abs__(x);
		x = 0;
	}

	if ((y < 0) && ((y + height2) > 0)) {
		height2 -= y;
		dst_ptr += __abs__(y) * nvf_width;
		y = 0;
	}

	if ((x < 208) && (y < 135) && (x >= 0) && (y >= 0)) {

		if (x + width2 > 208) {
			width2 = 208 - x;
		}

		if (y + height2 > 135) {
			height2 = 135 - y;
		}

		ptr2 = g_renderbuf_ptr + 208 * y + x;

		if (!flag) {
			copy_solid(ptr2, dst_ptr, width2, height2, 208, nvf_width, 128);
		} else {
			copy_solid_permuted(ptr2, dst_ptr + width2 - 1, width2, height2, 208, nvf_width, 128);
		}
	}
}

void DNG_stub4(void)
{
	signed short l1;
	signed short l2;
	signed char l3;
	unsigned char l4;
	unsigned char l5;
	/* REMARK: not sure if (x.y) is the correct terminology here */
	struct struct_point *ptr;

	signed short i;
	signed short j;

	for (i = 0; i < 22; i++) {

		l3 = g_dng_stub4_unkn4[i];

		l5 = g_visual_field_vals[l3];

		l4 = (unsigned char)div16(l5);

		ptr = (l4 == 6) ? &g_dng_stub4_unkn2[l3] :
			(l4 == 5) ? &g_dng_stub4_unkn3[l3] :
			(l4 == 4) ? &g_dng_stub4_unkn1[l3] :
			(l4 == 3) ? &g_dng_stub4_unkn1[l3] : &g_dng_stub4_unkn0[l3];


		l1 = ptr[0].x;
		l2 = ptr[0].y;

		l3 = g_visual_fields_tex[l3];

		if (l3 != -1) {

			ptr = (struct struct_point*)&g_dng_gfxtab[l3 - 1].a[0];

			if ((j = ptr[1].x) != -1) {

				if ((j & 0x4000) && ((((l5 & 3) + 2) & 3) != gs_direction)) {
				} else {
					DNG_draw_walls(l1 + ptr[0].x, l2 + ptr[0].y, j);
				}
			}

			if ((j = ptr[2].y) != -1) {

				if ((j & 0x4000) && ((((l5 & 3) + 2) & 3) != gs_direction)) {
				} else {
					DNG_draw_walls(l1 + ptr[1].y, l2 + ptr[2].x, j);
				}
			}

			if ((j = ptr[4].x) != -1) {

				if ((j & 0x4000) && ((((l5 & 3) + 2) & 3) != gs_direction)) {
				} else {
					DNG_draw_walls(l1 + ptr[3].x, l2 + ptr[3].y, j);
				}
			}
		}
	}
}

void DNG_stub5(void)
{
	draw_compass();

	g_pic_copy.x1 = g_ani_posx;
	g_pic_copy.y1 = g_ani_posy;
	g_pic_copy.x2 = g_ani_posx + 207;
	g_pic_copy.y2 = g_ani_posy + 134;
	g_pic_copy.src = g_renderbuf_ptr;

	update_mouse_cursor();

	g_special_screen = 0;

	wait_for_vsync();

	do_pic_copy(1);

	DNG_lights();

	refresh_screen_size();
}

/**
 * \brief   check for stafflevel >= 2 in current group
 *
 * \return              0 = false, 1 = true
 */
signed short is_staff_lvl2_in_group(void)
{
	struct struct_hero *hero_i;
	signed short i;

	hero_i = get_hero(0);
	for (i = 0; i <= 6; i++, hero_i++) {

		if ((hero_i->typus) && (hero_i->group_no == gs_current_group) &&
			check_hero(hero_i) && (hero_i->staff_level >= 2))
		{
			return 1;
		}
	}

	return 0;
}

void DNG_lights(void)
{
	signed short l1;
	signed char l2;

	signed short i;

	if (div16(g_visual_field_vals[1]) != 11) {

		/* copy palette */
		memcpy(g_text_output_buf, g_buffer11_ptr, 0xc0);

		if (!(g_visual_field_vals[1] & 1)) {

			if (gs_ingame_timers[INGAME_TIMER_DARKNESS]) {
				l1 = 10;
			} else if (gs_ingame_timers[INGAME_TIMER_FLIM_FLAM] || is_staff_lvl2_in_group()) {
				l1 = 0;
			} else {
				if ( (l1 = get_max_light_time()) != -1) {
					l1 = 10 - l1;
				} else {
					l1 = 10;
				}
			}
		} else {
			if (gs_ingame_timers[INGAME_TIMER_DARKNESS]) {
				l1 = 10;
			} else {
				l1 = 0;
			}
		}

		gs_dungeon_light = ((l1 == 9) ? 1 : (l1 == 10) ? 2 : 0);
		l1 *= 3;

		for (i = 0; i < 0xc0; i++) {

			l2 = g_text_output_buf[i] - l1;

			if (l2 < 0) {
				l2 = 0;
			}

			g_text_output_buf[i] = l2;
		}

		wait_for_vsync();
		set_palette((Bit8u*)g_text_output_buf, 0x80, 0x40);
	}
}

/**
 * \brief   performs a step (forward or backward) in a dungeon. time advances by 1 minute.
 *
 * \param 	foward	1: forward step; -1: backward step
 */
void DNG_timestep(signed short forward)
{
	signed short dir;

	timewarp(MINUTES(1));

	if (gs_deathtrap && !(--gs_deathtrap_steps)) {
		/* oh oh: death trap is activated and there are no remaining steps in the dungeon... */

		if (gs_deathtrap == 1) {
			/* It is the death trap on the Totenschiff. -> it sinks...  */

			load_ani(18);
			init_ani(1);

			GUI_output(get_tx(23));
		}

		gs_dungeon_index = DUNGEONS_NONE;

		/* exit game */
		g_game_state = GAME_STATE_DEAD;
	}

	if (g_game_state == GAME_STATE_MAIN) {

		dir = gs_direction;

		if (forward == 1) {

			/* go forward */

			if (!dir) {
				/* north */
				gs_y_target--;
			} else if (dir == EAST) {
				/* east */
				gs_x_target++;
			} else if (dir == SOUTH) {
				/* south */
				gs_y_target++;
			} else {
				/* west */
				gs_x_target--;
			}
		} else {

			/* go backward */

			if (!dir) {
				/* north */
				gs_y_target++;
			} else if (dir == EAST) {
				/* east */
				gs_x_target--;
			} else if (dir == SOUTH) {
				/* south */
				gs_y_target--;
			} else {
				/* west */
				gs_x_target++;
			}
		}

		g_dng_floor_tex ^= 1;
	}
}

void DNG_update_pos(void)
{
	set_var_to_zero();

	DNG_stub1();

	g_dng_refresh_x_target = gs_x_target;
	g_dng_refresh_y_target = gs_y_target;
	g_dng_refresh_direction = gs_direction;
}

void DNG_inc_level(void)
{
	g_dng_level_changed = 1;
	gs_dungeon_level++;
	load_area_description(1);
	DNG_update_pos();
}

void DNG_dec_level(void)
{
	g_dng_level_changed = 1;
	gs_dungeon_level--;
	load_area_description(1);
	DNG_update_pos();
}

void DNG_open_door(void)
{
	signed short x;
	signed short y;
	signed short iters;
	signed short i;

	DNG_floor_ceil();
	move();
	g_visual_field_vals[5] = 32;
	DNG_turn();
	DNG_stub3();
	DNG_stub4();

	memmove((Bit8u*)g_renderbuf_ptr + 0x7530, g_renderbuf_ptr, 0x6db0);

	if (!gs_dungeon_gfx_style) {
		x = 45;
		y = 38;
		iters = 19;
	} else if (gs_dungeon_gfx_style == 1) {
		x = 47;
		y = 30;
		iters = 20;
	} else {
		x = 54;
		y = 44;
		iters = 17;
	}

	play_voc(ARCHIVE_FILE_FX15_VOC);

	update_mouse_cursor();

	for (i = 0; i < iters; i++) {

		door_frame(31, x, y, (i * 4) + 1);

		DNG_stub5();

		memmove(g_renderbuf_ptr, g_renderbuf_ptr + 30000, 28080);
	}

	refresh_screen_size();
}

void DNG_close_door(void)
{
	signed short x;
	signed short y;
	signed short iters;
	signed short i;

	DNG_floor_ceil();
	move();
	DNG_turn();
	DNG_stub3();
	DNG_stub4();

	memmove(g_renderbuf_ptr + 30000, g_renderbuf_ptr, 28080);

	if (!gs_dungeon_gfx_style) { /* dungeon graphics: wood */
		x = 45;
		y = 38;
		iters = 18;
	} else if (gs_dungeon_gfx_style == 1) { /* dungeon graphics: marble */
		x = 47;
		y = 30;
		iters = 19;
	} else { /* dungeon graphics: stone */
		x = 54;
		y = 44;
		iters = 16;
	}

	play_voc(ARCHIVE_FILE_FX15_VOC);

	update_mouse_cursor();

	for (i = iters; i >= 0; i--) {

		door_frame(31, x, y, (i * 4) + 1);

		DNG_stub5();

		memmove(g_renderbuf_ptr, g_renderbuf_ptr + 30000, 28080);
	}

	refresh_screen_size();
}

void DNG_stub6(void)
{
	signed short l_si;
	signed short l_di;
	signed short l1;
	struct struct_hero *hero_auto;
	struct struct_hero *hero1;
	struct struct_hero *hero2;

	play_voc(ARCHIVE_FILE_FX18_VOC);

	if (gs_dungeon_light) {

		if (DNG_fallpit(6)) {
			gs_x_target = gs_x_target_bak;
			gs_y_target = gs_y_target_bak;
		}
	} else {

		if (((l_si = DNG_check_climb_tools()) != -1) && ((l_di = count_heroes_available_in_group()) > 1))
		{

			/* ropes oder staff */
			*g_dtp2 = '\0';

			if (l_si) {

				sprintf(g_dtp2, get_ttx(768), get_hero(l_si - 1)->alias);
			}

			if (l_di == 2) {

				hero1 = get_first_hero_available_in_group();

				hero2 = get_second_hero_available_in_group();

				sprintf(g_text_output_buf, get_ttx(769), hero1->alias, hero2->alias);

				strcat(g_dtp2, g_text_output_buf);

				if (test_attrib(hero1, ATTRIB_GE, 2) <= 0) {

					sprintf(g_text_output_buf, get_ttx(770), hero1->alias, hero2->alias, (l_si = random_schick(3) + 1));

					strcat(g_dtp2, g_text_output_buf);

					sub_hero_le(hero2, l_si);
				}
			} else {

				hero_auto = get_hero((l1 = get_hero_KK_best()));

				l_di--;

				l_si = 0;

				do {

					if (l_si == l1) {
						l_si++;
					}

					strcat(g_dtp2, get_hero(l_si++)->alias);

					if (--l_di) {

						strcat(g_dtp2, (l_di >= 2 ? g_dng_stub6_str_comma : g_dng_stub6_str_and));
					}

				} while (l_di);

				sprintf(g_text_output_buf, get_ttx(771), hero_auto->alias,
					GUI_get_ptr(hero_auto->sex, 0),
					GUI_get_ptr(hero_auto->sex, 2));

				strcat(g_dtp2, g_text_output_buf);
			}

			GUI_output(g_dtp2);
		} else {

			sub_group_le(random_schick(5));
		}

		DNG_inc_level();
	}
}


signed short DNG_check_climb_tools(void)
{
	signed short i;
	struct struct_hero *hero = get_hero(0);

	/* check for a mage with staffspell > 2 */
	for (i = 0; i <= 6; i++, hero++) {

		/* TODO: potential Original-Bug: What if petrified / unconscious etc.? Compare to is_staff_lvl2_in_group where check_hero is called */
		if ((hero->typus != HERO_TYPE_NONE) && (hero->group_no == gs_current_group) &&
			!hero->flags.dead && (hero->typus == HERO_TYPE_MAGE) && (hero->staff_level > 2))
		{
			return i + 1;
		}
	}

	/* check for ladder or rope */
	return ((get_first_hero_with_item(ITEM_ROPE) != -1) || (get_first_hero_with_item(ITEM_ROPE_LADDER) != -1)) ? 0 : -1;
}

signed int DNG_fallpit(const signed int max_damage)
{
	signed int hero_pos;
	signed int i;
	signed int nr_fallen_heroes;
	signed int new_group;
	signed int retval;

	new_group = 0;
	retval = 0;

	g_dng_level_changed = 1;
	nr_fallen_heroes = random_schick(gs_group_member_counts[gs_current_group]);

	/* If the result was rolled that all but one hero of the active group should fall down, all heroes will fall down.
	 * Reason probably: Avoid that the NPC gets separated into a single group (as he might be the single hero not falling down) */

	if (gs_group_member_counts[gs_current_group] - 1 == nr_fallen_heroes) {
		nr_fallen_heroes = gs_group_member_counts[gs_current_group];
	}

	if (gs_group_member_counts[gs_current_group] != nr_fallen_heroes) {
		/* only a part of the heroes of the active group falls down */

		/* find empty group */
		while (gs_group_member_counts[new_group]) {
			new_group++;
		}

		for (i = 0; i < nr_fallen_heroes; i++) {

			do {
				hero_pos = random_schick(7) - 1;

			} while (!get_hero(hero_pos)->typus || (get_hero(hero_pos)->group_no != gs_current_group) ||
					((nr_fallen_heroes == 1) && (hero_pos == 6))); /* avoid that the NPC gets separated into a single group */

			get_hero(hero_pos)->group_no = (unsigned char)new_group;
			gs_group_member_counts[new_group]++;
			gs_group_member_counts[gs_current_group]--;
			sub_hero_le(get_hero(hero_pos), random_schick(max_damage));
		}

		GRP_save_pos(new_group);
		gs_groups_dng_level[new_group] = gs_dungeon_level + 1;

		retval = 1;

	} else {

		hero_pos = 0;

		for (i = 0; i < nr_fallen_heroes; i++) {

			while (!get_hero(hero_pos)->typus || (get_hero(hero_pos)->group_no != gs_current_group))
			{
				hero_pos++;
			}

			sub_hero_le(get_hero(hero_pos++), random_schick(max_damage));
		}

		DNG_inc_level();
	}

	return retval;
}

void DNG_enter_dungeon(signed short dungeon_id)
{
	signed short x_pos;
	signed short y_pos;
	signed short level;
	signed short dir;
	signed short i;
	Bit8u *ptr;

	switch (dungeon_id) {

		case DUNGEONS_TOTENSCHIFF:  x_pos = 9;  y_pos = 11;  dir = NORTH;  level = 2;  break;
		case DUNGEONS_VERFALLENE_HERBERGE:  x_pos = 1;  y_pos = 1;   dir = SOUTH;  level = 0;  break;
		case DUNGEONS_SPINNENHOEHLE:  x_pos = 1;  y_pos = 8;   dir = EAST;  level = 0;  break;

#if !defined(__BORLANDC__)
		case DUNGEONS_WOLFSHOEHLE:  x_pos = 7;  y_pos = 14;  dir = NORTH;  level = 0;  break;
#else
mark1:		case DUNGEONS_WOLFSHOEHLE:  x_pos = 7;  y_pos = 14;  dir = NORTH;  level = 0;  break;
#endif

		case DUNGEONS_GOBLINHOEHLE:  x_pos = 6;  y_pos = 14;  dir = NORTH;  level = 0;  break;
		case DUNGEONS_DASPOTASCHATZ:  x_pos = 13; y_pos = 14;  dir = NORTH;  level = 0;  break;
		case DUNGEONS_RUINE_DES_SCHWARZMAGIERS:  x_pos = 1;  y_pos = 13;  dir = NORTH;  level = 0;  break;
		case DUNGEONS_ORKBEHAUSUNG:  x_pos = 1;  y_pos = 14;  dir = EAST;  level = 0;  break;

#if !defined(__BORLANDC__)
		case DUNGEONS_KULTSTAETTE_DES_NAMENLOSEN:  x_pos = 7;  y_pos = 14;  dir = NORTH;  level = 0;  break;
#else
		case DUNGEONS_KULTSTAETTE_DES_NAMENLOSEN:  goto mark1;
mark2:			   goto mark1;
#endif

		case DUNGEONS_DRACHENHORT:  x_pos = 1;  y_pos = 3;   dir = EAST;  level = 0;  break;

#if !defined(__BORLANDC__)
		case DUNGEONS_PIRATENHOEHLE:  x_pos = 7;  y_pos = 14;  dir = NORTH;  level = 0;  break;
#else
		case DUNGEONS_PIRATENHOEHLE:  goto mark2;
#endif

		case DUNGEONS_ZWERGENFESTE:  x_pos = 13; y_pos = 14;  dir = NORTH;  level = 0;  break;
		case DUNGEONS_VERLASSENE_MINE: {
			x_pos = 7;
			y_pos = 14;
			dir = NORTH;
			level = 0;

			gs_dng13_collapsecount = 0;
			gs_dng13_herocount = count_heroes_in_group();
			break;
		}
		case DUNGEONS_ZWINGFESTE: {
			x_pos = 1;
			y_pos = 14;
			dir = WEST;
			level = gs_current_loctype = LOCTYPE_NONE; /* == 0 */
			break;
		}
		case DUNGEONS_HYGGELIKS_RUINE:  x_pos = 1;  y_pos = 11;   dir = EAST;  level = 0;  break;
	}

	gs_x_target = x_pos;
	gs_y_target = y_pos;
	gs_direction = dir;
	gs_dungeon_level = level;
	gs_dungeon_index = dungeon_id;
	gs_current_loctype_bak = gs_current_loctype;
	gs_current_town_bak = gs_current_town;
	gs_current_loctype = gs_current_town = TOWNS_NONE;
	g_dng_area_loaded = g_city_area_loaded = -1;

	if (dungeon_id == DUNGEONS_ZWINGFESTE) {

		ptr = g_renderbuf_ptr + 0x1f4;
		memset(g_renderbuf_ptr, 0, 0x120);
		memcpy(g_renderbuf_ptr + 0x1f4, gs_palette_floor, 0x120);

		for (i = 0; i < 0x40; i++) {

			pal_fade((Bit8s*)ptr, (Bit8s*)g_renderbuf_ptr);
			pal_fade((Bit8s*)ptr + 0x60, (Bit8s*)g_renderbuf_ptr + 0x60);
			pal_fade((Bit8s*)ptr + 0xc0, (Bit8s*)g_renderbuf_ptr + 0xc0);

			wait_for_vsync();

			set_palette(ptr, 0, 0x20);
			set_palette(ptr + 0x60, 0x80, 0x40);
		}

		do_fill_rect(g_renderbuf_ptr, 0, 0, 319, 199, 0);
		g_pic_copy.x1 = 0;
		g_pic_copy.y1 = 0;
		g_pic_copy.x2 = 240;
		g_pic_copy.y2 = 136;
		g_pic_copy.src = g_renderbuf_ptr;
		update_mouse_cursor();
		do_pic_copy(1);
		refresh_screen_size();
	}
}

#if !defined(__BORLANDC__)
}
#endif
